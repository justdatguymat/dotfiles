set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

" check whether vim-plug is installed and install it if necessary
"let plugpath = expand('<sfile>:p:h'). '/autoload/plug.vim'
"if !filereadable(plugpath)
"    if executable('curl')
"        let plugurl = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
"        call system('curl -fLo ' . shellescape(plugpath) . ' --create-dirs ' . plugurl)
"        if v:shell_error
"            echom "Error downloading vim-plug. Please install it manually.\n"
"            exit
"        endif
"    else
"        echom "vim-plug not installed. Please install it manually or install curl.\n"
"        exit
"    endif
"endif

" set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin(stdpath('data') . '/plugged')

Plug 'oblitum/rainbow'
Plug 'ryanoasis/nerd-fonts'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" --------- THEMES ----------
Plug 'vim-airline/vim-airline-themes'
Plug 'flazz/vim-colorschemes'
Plug 'joshdick/onedark.vim'
Plug 'bcicen/vim-vice'
Plug 'tstelzer/welpe.vim'
Plug 'mhinz/vim-janah'
Plug 'dikiaap/minimalist'
Plug 'zacanger/angr.vim'
Plug 'bellma101/vim-snazzy'
Plug 'dracula/vim'
Plug 'tomasiser/vim-code-dark'
Plug 'mhartington/oceanic-next'
"Plug 'rafi/awesome-colorschemes'


" -------- EDITTING PLUGINS ---------
" Trailing whitespace highlighting & automatic fixing
Plug 'ntpeters/vim-better-whitespace'

" Print function signatures in echo area
Plug 'Shougo/echodoc.vim'

" Intellisense Engine
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'neoclide/coc-prettier'
" Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugs'}
"
" Denite - Fuzzy finding, buffer management
" Plug 'Shougo/denite.nvim', {'do': ':UpdateRemotePlugs'}
"
" Snippet support
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'


" -------- Git Plugins ---------
" Enable git changes to be shown in sign column
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'



" -------- Javascript Plugins ---------

" Typescript syntax highlighting
Plug 'HerringtonDarkholme/yats.vim'

" ReactJS JSX syntax highlighting
Plug 'mxw/vim-jsx'

" Generate JSDoc commands based on function signature
Plug 'heavenshell/vim-jsdoc'



" -------- SYNTAX HIGHLIGHTING ---------

" Syntax highlighting for nginx
Plug 'chr4/nginx.vim'

" Syntax highlighting for javascript libraries
Plug 'othree/javascript-libraries-syntax.vim'

" Improved syntax highlighting and indentation
Plug 'othree/yajs.vim'

" ESLIT
" Plug 'carlitux/deoplete-ternjs'

" -------- OTHER ---------
Plug 'alvan/vim-closetag'
Plug 'christoomey/vim-tmux-navigator'
Plug 'easymotion/vim-easymotion'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'mhinz/vim-startify'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
"Plug 'L9'
"Plug 'ctrlpvim/ctrlp.vim'
"Plug 'ervandew/supertab'
"Plug 'Yggdroot/indentLine'

"Plug 'raghur/fruzzy', {'do': { -> fruzzy#install() }}
"Plug 'neomake/neomake', {'on': 'Neomake'}

"Plug 'davidhalter/jedi-vim'
"Plug 'Valloric/YouCompleteMe'
"Plug 'tpope/vim-fugitive'


call plug#end()

"
" tell denite to use this matcher by default for all sources
" call denite#custom#source('_', 'matchers', ['matcher/fruzzy'])

highlight Pmenu guibg=white guifg=black gui=bold
highlight Comment gui=bold
highlight Normal gui=none
highlight NonText guibg=none

filetype plugin indent on
syntax enable
"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete\ 12
"set guifont=Fira\ Mono\ Bold\ for\ Powerline\ Nerd\ Font\ Complete\ 12
set encoding=utf-8

colorscheme onedark
colorscheme dracula
colorscheme OceanicNext

let mapleader = " "


set autoindent
set autoread
set backspace=2
set cindent
set cmdheight=2
set completeopt=menu
set cursorline
set dict=/usr/share/dict/words
set foldcolumn=1
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set modelines=0
set mouse=a
set mousemodel=popup
set nolist
set noshowmode
set number
set pastetoggle=<leader>v
set relativenumber
set ruler
set shortmess+=c
set showcmd
set showmatch
set signcolumn=yes
set smartcase
set splitbelow
set splitright
set termguicolors
set undodir=$HOME/tmp/vimundo
set undofile
set undolevels=1000
set undoreload=10000
set updatetime=300
set wildmenu
set wildmode=longest:full
set winbl=10
" TAB
" insert spaces when TAB is pressed
set expandtab

" change number of spaces that a TAB counts for during editing ops
set softtabstop=2

" indentation amount for < and > commands
set shiftwidth=2

"set smarttab
"set tabstop=2
"set ts=2

vmap <Tab> >gv
vmap <S-Tab> <gv


nmap <leader>w :w!<cr>
nmap <leader>q :q<cr>
nmap <leader>n :noh<cr>
nmap <leader>s :windo set scrollbind
nmap <leader>S :windo set scrollbind!
nmap <leader>c :bd<cr>
nmap <leader>e :Explore<cr>
nnoremap <leader>a ggVG

" ECLIM keypams
nnoremap <silent> <buffer> <leader>i :JavaImport<cr>
nnoremap <silent> <buffer> <leader>d :JavaDocSearch -x declarations<cr>
nnoremap <silent> <buffer> <cr> :JavaSearchContext<cr>

map <C-n> :bn<cr>
map <C-p> :bp<cr>


no <down> ddp
no <left> :bp<cr>
no <right> :bn<cr>
no <up> ddkP
ino <down> <Nop>
ino <left> <Nop>
ino <right> <Nop>
ino <up> <Nop>
vno <down> <Nop>
vno <left> <Nop>
vno <right> <Nop>
vno <up> <Nop>


"imap <C-x> <Nop>
imap jj <ESC>
imap <C-j> <ESC>j
imap <C-k> <ESC>k
inoremap <C-l> <ESC>A
imap <C-space> <ESC>
vmap <C-space> <ESC>

nmap di, f,dT,
nmap ci, f,cT,
nmap da, f,ld2F,i,<ESC>l
nmap ca, f,ld2F,i,<ESC>a

nmap G Gzz
nmap n nzz
nmap N Nzz
nmap } }zz
nmap { {zz
nmap ] ]zz
nmap [ [zz
nmap j jzz
nmap k kzz
nmap h hzz
nmap l lzz
nmap <C-r> <C-r>zz
nmap gO O<ESC>j
nmap go o<ESC>k
nmap I ^i
nmap A $a


vmap } }zz
vmap { {zz
vmap j jzz
vmap k kzz
vmap h hzz
vmap l lzz


" === Denite shorcuts === "
"   ;         - Browser currently open buffers
"   <leader>t - Browse list of files in current directory
"   <leader>g - Search current directory for occurences of given term and close window if no results
"   <leader>j - Search current directory for occurences of word under cursor
nmap ; :Denite buffer<CR>
nmap <leader>t :DeniteProjectDir file/rec<CR>
nnoremap <leader>g :<C-u>Denite grep:. -no-empty<CR>
nnoremap <leader>j :<C-u>DeniteCursorWord grep:.<CR>

" Define mappings while in 'filter' mode
"   <C-o>         - Switch to normal mode inside of search results
"   <Esc>         - Exit denite window in any mode
"   <CR>          - Open currently selected file in any mode
"   <C-t>         - Open currently selected file in a new tab
"   <C-v>         - Open currently selected file a vertical split
"   <C-i>         - Open currently selected file in a horizontal split
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o>
  \ <Plug>(denite_filter_quit)
  inoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  inoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  inoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  inoremap <silent><buffer><expr> <C-v>
  \ denite#do_map('do_action', 'vsplit')
  inoremap <silent><buffer><expr> <C-i>
  \ denite#do_map('do_action', 'split')
endfunction

" Define mappings while in denite window
"   <CR>        - Opens currently selected file
"   q or <Esc>  - Quit Denite window
"   d           - Delete currenly selected file
"   p           - Preview currently selected file
"   <C-o> or i  - Switch to insert mode inside of filter prompt
"   <C-t>       - Open currently selected file in a new tab
"   <C-v>       - Open currently selected file a vertical split
"   <C-h>       - Open currently selected file in a horizontal split
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-o>
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> <C-v>
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> <C-h>
  \ denite#do_map('do_action', 'split')
endfunction


" ---- NEOVIM ----

" ------ COC.VIM PLUGIN  -------
" use <tab> for trigger completion and navigate to next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
"function! s:check_back_space() abort
" let col = col('.') - 1
" return !col || getline('.')[col - 1] = ~# '\s'
"endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

"Close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"



" use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" use <cr> to confirm completion, <C-g>u means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>


" ------ DEOPLETE PLUGIN  -------
"let g:deoplete#enable_at_startup = 1
"inoremap <expr> <M-j> pumvisible() ? "\<C-n>" : "\<M-j>"
"inoremap <expr> <M-k> pumvisible() ? "\<C-p>" : "\<M-k>"


" coc-prettier
" command! -nargs=0 Prettier :CocCommand prettier.formatFile


" ------ DENITE PLUGIN  -------
"" Wrap in try/catch to avoid errors on initial install before plugin is available
try
" === Denite setup ==="
" Use ripgrep for searching current directory for files
" By default, ripgrep will respect rules in .gitignore
"   --files: Print each file that would be searched (but don't search)
"   --glob:  Include or exclues files for searching that match the given glob
"            (aka ignore .git files)
"
call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])

" Use ripgrep in place of "grep"
call denite#custom#var('grep', 'command', ['rg'])

" Custom options for ripgrep
"   --vimgrep:  Show results with every match on it's own line
"   --hidden:   Search hidden directories and files
"   --heading:  Show the file name above clusters of matches from each file
"   --S:        Search case insensitively if the pattern is all lowercase
call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])

" Recommended defaults for ripgrep via Denite docs
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Remove date from buffer list
call denite#custom#var('buffer', 'date_format', '')

" Custom options for Denite
"   auto_resize             - Auto resize the Denite window height automatically.
"   prompt                  - Customize denite prompt
"   direction               - Specify Denite window direction as directly below current pane
"   winminheight            - Specify min height for Denite window
"   highlight_mode_insert   - Specify h1-CursorLine in insert mode
"   prompt_highlight        - Specify color of prompt
"   highlight_matched_char  - Matched characters highlight
"   highlight_matched_range - matched range highlight
let s:denite_options = {'default' : {
\ 'split': 'floating',
\ 'start_filter': 1,
\ 'auto_resize': 1,
\ 'source_names': 'short',
\ 'prompt': 'λ ',
\ 'statusline': 0,
\ 'highlight_matched_char': 'QuickFixLine',
\ 'highlight_matched_range': 'Visual',
\ 'highlight_window_background': 'Visual',
\ 'highlight_filter_background': 'DiffAdd',
\ 'winrow': 1,
\ 'vertical_preview': 1
\ }}

" Loop through denite options and enable them
function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)
catch
  echo 'Denite not installed. It should work after running :PlugInstall'
endtry


"" ------ RAINBOW BRACES  -------
let g:rainbow_active = 1
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']


" ------ DEVICONS -------
let g:webdevicons_enable=1
let g:webdevicons_enable_nerdtree=1
let g:webdevicons_enable_unite=1
let g:webdevicons_enable_airline_statusline=1

" ----- ECLIM ----- "
let g:EclimBrowser = 'google-chrome'
"let g:EclimCompletionMethod = 'omnifunc'
"let g:SuperTabDefaultCompletionType = 'context'


" ------ CtrlP -------
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_show_hidden = 1
" "let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
" let g:ctrlp_custom_ignore = '\v[\/](node_modules|DS_Store|Jtarget|dist)|(\.(swp|ico|git|svn))$'
" " tell CtrlP to use this matcher
" let g:ctrlp_match_func = {'match': 'fruzzy#ctrlp#matcher'}
" let g:ctrlp_match_current_file = 1 " to include current file in matches

"set wildignore+=*.swp,*.zip,*.swo,*.pyc,*.class
" nnoremap <leader>f :CtrlP<CR>


" vim ident guide
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']


" ------ NERDTree ------
let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1
nmap t :NERDTreeToggle<CR>
nmap <silent> T :NERDTreeFind<cr>

let NERDTreeIgnore = ['\.pyc$', '\.class$']

" ------ JEDI VIM -------

" let g:jedi#completion_enabled = 0

" ------ SYNTATSTIC

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"
"" for java
"let g:syntastic_java_checkers = []


" ------ Neomake -------
" let g:neomake_javascript_enabled_makers = ['eslint']
" call neomake#configure#automake('nrwi', 500)



" ------ YouCompleteMe -------

" let g:ycm_pyt

" ------ AIRLINE -------
" Wrap in try/catch to avoid errors on initial install before plugin is available

" Enable extensions
let g:airline_extensions = ['branch', 'hunks', 'coc']


let g:airline_powerline_fonts = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#tab_min_count = 1 " only show tabline if tabs are being used (more than 1 tab open)
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:tsuquyomi_disable_default_mappings = 1


"let g:airline_theme='bubblegum'
let g:airline_theme = 'dracula'
"let g:airline_theme='space'
"let g:airline_theme='OceanicNext'
"
"" don't hide quotes in json files
"let g:vim_json_syntax_conceal = 0
"
"" Update section z to just have line number
"let g:airline_section_z = airline#section#create(['linenr'])
"
"" Do not draw separators for empty sections (only for the active window) >
"let g:airline_skip_empty_sections = 1
"
"" Smartly uniquify buffers names with similar filename, suppressing common parts of paths.
"
"" Custom setup that removes filetype/whitespace from default vim airline bar
"let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'z', 'warning', 'error']]
"
let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
"
let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'
"
"" Configure error/warning section to use coc.nvim
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
"
"" Hide the Nerdtree status line to avoid clutter
"let g:NERDTreeStatusline = ''
"
"" Disable vim-airline in preview mode
"let g:airline_exclude_preview = 1
"
"" Enable powerline fonts
"let g:airline_powerline_fonts = 1
"
"" Enable caching of syntax highlighting groups
let g:airline_highlighting_cache = 1
"
" " Define custom airline symbols
" if !exists('g:airline_symbols')
"   let g:airline_symbols = {}
" endif

" Don't show git changes to current file in airline
" let g:airline#extensions#hunks#enabled=0
try

catch
  echo 'Airline not installed. It should work after running :PlugInstall'
endtry


" Customize NERDTree directory
hi! NERDTreeCWD guifg=#99c794

" Make background color transparent for git changes
hi! SignifySignAdd guibg=NONE
hi! SignifySignDelete guibg=NONE
hi! SignifySignChange guibg=NONE

" Highlight git change signs
hi! SignifySignAdd guifg=#99c794
hi! SignifySignDelete guifg=#ec5f67
hi! SignifySignChange guifg=#c594c5


" FORMATTERS
au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css


""" Custom Functions

" Trim Whitespaces
function! TrimWhitespace()
    let l:save = winsaveview()
    %s/\\\@<!\s\+$//e
    call winrestview(l:save)
endfunction
" nmap <leader>t :call TrimWhitespace()<CR>

let g:ale_linters = {
\   'python': ['flake8', 'pylint'],
\   'javascript': ['eslint'],
\   'vue': ['eslint']
\}

let g:ale_fixers = {
  \    'javascript': ['eslint'],
  \    'typescript': ['prettier', 'tslint'],
  \    'vue': ['eslint'],
  \    'scss': ['prettier'],
  \    'html': ['prettier'],
  \    'reason': ['refmt']
\}
let g:ale_fix_on_save = 1
